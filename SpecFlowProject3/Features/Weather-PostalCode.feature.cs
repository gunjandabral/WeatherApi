// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WeatherApi.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("WeatherData-PostalCode", Description="Following Scenarios get the weather data based on Postal Code ", SourceFile="Features\\Weather-PostalCode.feature", SourceLine=0)]
    public partial class WeatherData_PostalCodeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Weather-PostalCode.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "WeatherData-PostalCode", "Following Scenarios get the weather data based on Postal Code ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void WeatherDataBasedOnPostalCode(string comments, string postalCode, string countryCode, string expectedResponse, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Comments", comments);
            argumentsOfScenario.Add("PostalCode", postalCode);
            argumentsOfScenario.Add("CountryCode", countryCode);
            argumentsOfScenario.Add("ExpectedResponse", expectedResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Weather Data based on PostalCode", null, tagsOfScenario, argumentsOfScenario);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
testRunner.Given(string.Format("I am a user who wants to get the weather details using {0} and {1}", postalCode, countryCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
testRunner.When("I look up the weather forecast as an authenticated user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
testRunner.Then(string.Format("the Api response code should be \'{0}\'", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Comments",
                            "clouds",
                            "snow"});
                table2.AddRow(new string[] {
                            "All parameters are approximations. Values in this tble are not utilized but can b" +
                                "e used with small change",
                            "0",
                            "0"});
#line 8
testRunner.And("I receive the weather forecast with the following parameters", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Weather Data based on PostalCode, Only Postal Code", SourceLine=13)]
        public virtual void WeatherDataBasedOnPostalCode_OnlyPostalCode()
        {
#line 4
this.WeatherDataBasedOnPostalCode("Only Postal Code", "2000", "", "OK", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Weather Data based on PostalCode, Postal Code and correct Country Code", SourceLine=13)]
        public virtual void WeatherDataBasedOnPostalCode_PostalCodeAndCorrectCountryCode()
        {
#line 4
this.WeatherDataBasedOnPostalCode("Postal Code and correct Country Code", "2000", "AU", "OK", ((string[])(null)));
#line hidden
        }
        
        public virtual void WeatherDataBasedOnPostalCode_NegativeScenario(string comments, string postalCode, string countryCode, string expectedResponse, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Comments", comments);
            argumentsOfScenario.Add("PostalCode", postalCode);
            argumentsOfScenario.Add("CountryCode", countryCode);
            argumentsOfScenario.Add("ExpectedResponse", expectedResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Weather Data based on PostalCode - Negative Scenario", null, tagsOfScenario, argumentsOfScenario);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
testRunner.Given(string.Format("I am a user who wants to get the weather details using {0} and {1}", postalCode, countryCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
testRunner.When("I look up the weather forecast as an authenticated user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
testRunner.Then(string.Format("the Api response code should be \'{0}\'", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Weather Data based on PostalCode - Negative Scenario, Postal Code and wrong Count" +
            "ry Code. There is a potential bug here", SourceLine=23)]
        public virtual void WeatherDataBasedOnPostalCode_NegativeScenario_PostalCodeAndWrongCountryCode_ThereIsAPotentialBugHere()
        {
#line 17
this.WeatherDataBasedOnPostalCode_NegativeScenario("Postal Code and wrong Country Code. There is a potential bug here", "2000", "JP", "NoContent", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
